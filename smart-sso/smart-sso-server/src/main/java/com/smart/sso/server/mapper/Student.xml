<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.smart.sso.server.dao.StudentDao">
	<select id="get" parameterType="java.lang.Integer"
		resultType="Student">
		SELECT
		a.*
		from
		t_student a
		WHERE
		id = #{id}
	</select>
	
	<select id="findStuDetail" parameterType="java.lang.Integer"
		resultType="java.util.HashMap">
		SELECT
			a.id,
			a.name,
			a.sex,
			a.campus,
			a.parentName,
			a.relationship,
			a.birthday,
			a.mobile,
			a.address,
			a.channel_sources,
			a.head_id,
			a.create_by,
			a.create_time,
			a.update_by,
			a.update_time,
			r.realName AS headName,
			r.id AS headId,
			n.option_value,
			n.option_code AS optionCode
		FROM t_student a
		LEFT JOIN sys_user r ON a.head_id = r.id
		LEFT JOIN sys_option n ON a.channel_sources = n.option_code
		WHERE a.id = #{id}
	</select>

	<insert id="insert" parameterType="Student"
		statementType="PREPARED" useGeneratedKeys="true" keyProperty="id">
		INSERT
		INTO t_student
		(id,
		name,
		sex,
		campus,
		parentName,
		relationship,
		birthday,
		mobile,
		address,
		channel_sources,
		head_id,
		create_by,
		create_time,
		update_by,
		update_time)
		VALUES (
		#{id},
		#{name},
		#{sex},
		#{campus},
		#{parentName},
		#{relationship},
		#{birthday},
		#{mobile},
		#{address},
		#{channel_sources},
		#{head_id},
		#{create_by},
		#{create_time},
		#{update_by},
		#{update_time});
	</insert>

	<update id="update" parameterType="Student"
		statementType="PREPARED">
		UPDATE t_student a SET
		name=#{name},
		sex=#{sex},
		campus=#{campus},
		parentName=#{parentName},
		relationship=#{relationship},
		birthday=#{birthday},
		mobile=#{mobile},
		address=#{address},
		channel_sources=#{channel_sources},
		head_id=#{head_id},
		update_by=#{update_by},
		update_time=#{update_time}
		WHERE
		a.id = #{id}
	</update>

	<select id="findPagination" parameterType="map"
		resultType="java.util.HashMap">
		SELECT
			a.*,
			r.realName,
			n.option_value,
			n.option_code AS optionCode
		FROM t_student a
		LEFT JOIN sys_user r ON a.head_id = r.id
		LEFT JOIN sys_option n ON a.channel_sources = n.option_code
		WHERE 1 = 1
		<if test="campus != null and campus != '' ">
			AND a.campus like CONCAT('%',#{campus},'%')
		</if>
		<if test="name != null and name != '' ">
			AND a.name like CONCAT('%',#{name},'%')
		</if>
		<if test="mobile != null and mobile != '' ">
			AND a.mobile = #{mobile}
		</if>
		ORDER BY a.id DESC
	</select>

	<select id="findByCampus" parameterType="map"
		resultType="Student">
		SELECT
		a.*,
		r.realName,
		n.option_value
		FROM
		t_student a
		LEFT JOIN sys_user r
		ON a.head_id = r.id
		LEFT JOIN sys_option n ON a.channel_sources =
		n.option_code
		WHERE 1 = 1
		<if test="campus != null and campus != '' ">
			AND a.campus like CONCAT('%',#{campus},'%')
		</if>
		ORDER BY
		a.create_time
	</select>

	<select id="findByName" parameterType="map" resultType="Object">
		SELECT
		a.*,
		r.realName,
		n.option_value
		FROM
		t_student a
		LEFT JOIN sys_user r
		ON a.head_id = r.id
		LEFT JOIN sys_option n ON a.channel_sources =
		n.option_code
		WHERE 1 = 1
		<if test="name != null and name != '' ">
			AND a.name like CONCAT('%',#{name},'%')
		</if>
	</select>

	<select id="findByMobile" parameterType="map"
		resultType="Object">
		SELECT
		a.*,
		r.realName,
		n.option_value
		FROM
		t_student a
		LEFT JOIN sys_user r
		ON a.head_id = r.id
		LEFT JOIN sys_option n ON a.channel_sources =
		n.option_code
		WHERE 1 = 1
		<if test="mobile != null and mobile != '' ">
			AND a.mobile =#{mobile}
		</if>
	</select>

	<delete id="deleteById" parameterType="list"
		statementType="PREPARED">
		DELETE FROM t_student
		<choose>
			<when test="list == null or list.size() == 0">
				WHERE 1 != 1
			</when>
			<when test="list.size() == 1">
				WHERE `id` =
				<foreach collection="list" item="id">#{id}</foreach>
			</when>
			<otherwise>
				WHERE `id` in
				<foreach collection="list" item="id" open="(" separator=","
					close=")">#{id}</foreach>
			</otherwise>
		</choose>
	</delete>

</mapper>